# serverless.yml

service: frontend-ecs-services

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dotenv-plugin
custom:
  wsgi:
    app: client.app # app.py and the app variable inside
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.6
  stage: dev
  # stage: ${env:environment}
  region: eu-central-1
  environment:
    environment: ${env:environment}
    bucket: ${env:bucket}

functions:
  ## Creation process
  client:
    handler: wsgi_handler.handler
    role: arn:aws:iam::648410456371:role/frontend-client-gateway-role-${env:environment}
    events:
      - http:
          path: "/createclient"
          method: post
      - http:
          path: "/removeclient"
          method: delete
  
  ## Creation process
  createservice:
    handler: artifacts.handler
    role: arn:aws:iam::648410456371:role/frontend-create-lambda-service-role-${env:environment}
    timeout: 60
    events:
      - s3:
          bucket: lazzaro-ongs-template-artifacts-${env:environment}
          event: s3:ObjectCreated:Put
  
  ## Deletion process
  removeservice:
    handler: stream.handler
    role: arn:aws:iam::648410456371:role/frontend-delete-lambda-service-role-${env:environment}
    timeout: 45
    events:
      # how to dynamically configure based on events
      # - stream:
      #   type: dynamodb
      #   arn:
      #     Fn::GetAtt: [ ClientTable, StreamArn ]
      # - stream: arn:aws:dynamodb:eu-central-1:648410456371:table/frontend-ddb-client-${env:environment}/stream/*    
      # - stream: arn:aws:dynamodb:eu-central-1:648410456371:table/frontend-ddb-client/stream/2021-05-06T13:13:45.502 # prod
  
  ## Test ssm parameter retrieval
  testservice:
    handler: testdeploy.handler
    role: arn:aws:iam::648410456371:role/front_test_delete_soon
    timeout: 30
    events:
      # - stream: arn:aws:dynamodb:eu-central-1:648410456371:table/frontend-ddb-client-pre/stream/2021-06-14T12:58:14.004

# resources:
  # - ${file(resources/ddb_table.yml)}
  # Resources:
  #   ClientTable:
  #     Type: "AWS::DynamoDB::Table"
  #     Properties:
  #       AttributeDefinitions:
  #         - AttributeName: Client
  #           AttributeType: S
  #       KeySchema:
  #         - AttributeName: Client
  #           KeyType: HASH
  #       ProvisionedThroughput:
  #         ReadCapacityUnits: 5
  #         WriteCapacityUnits: 5
  #       TableName: frontend-ddb-client-${env:environment}
  #       Tags:
  #         - Key: "Name"
  #           Value: frontend-ddb-client-${env:environment}
  #         - Key: "Creation_Date"
  #           Value: "14 June 2021"
  #       StreamSpecification:
  #         StreamViewType: NEW_AND_OLD_IMAGES